//*************************************************************************************************
package ode.schedule;
//*************************************************************************************************

import java.util.ArrayList;
import java.util.List;

//*************************************************************************************************
public class Scheduler {

	//=============================================================================================
	private List<Schedule> schedules = new ArrayList<>();
	//=============================================================================================
	
	//=============================================================================================
	public Scheduler() {}
	//=============================================================================================

	//=============================================================================================
	/**
	 * 
	 * @param period - time period between schedules in nano time
	 * @param task - task reference to the code to be executed on schedule
	 */
	public void add(long period, Task task) {
		Schedule schedule = new Schedule(period, task);
		schedules.add(schedule);
	}
	//=============================================================================================
	
	//=============================================================================================
	public void init() {
		long current = System.nanoTime();
		for (Schedule schedule : schedules) {
			schedule.init(current);
		}
	}
	//=============================================================================================

	//=============================================================================================
	public void update() {
		long current = System.nanoTime();
		update(current);
	}
	//=============================================================================================
	
	//=============================================================================================
	/**
	 * 
	 * @param current - current nano time
	 */
	public void update(long current) {
		for (Schedule schedule : schedules) {
			schedule.update(current);
			Thread.yield();
		}
	}
	//=============================================================================================
	
}
//*************************************************************************************************
