//*************************************************************************************************
package ode.gui;
//*************************************************************************************************

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import ode.msg.MsgBox;
import ode.npa.Graphics;

//*************************************************************************************************
public class GUI {

	//=============================================================================================
	private final Factory factory = new Factory(this);
	private final Renderer renderer = new Renderer(this);
	private final Messages messages = new Messages(this);
	//=============================================================================================
	
	//=============================================================================================
	private final List<Widget> roots = new ArrayList<>();
	private final List<Widget> roots_ro = Collections.unmodifiableList(roots);
	//=============================================================================================

	//=============================================================================================
	final List<Widget> widgets = new ArrayList<Widget>();
	private final List<Widget> widgets_ro = Collections.unmodifiableList(widgets);
	//=============================================================================================

	//=============================================================================================
	public void assign(MsgBox msgbox) {
		messages.assign(msgbox);
	}
	//=============================================================================================
	
	//=============================================================================================
	public List<Widget> roots() {
		return roots_ro;
	}
	//=============================================================================================

	//=============================================================================================
	public void root(Widget ... widgets) {
		this.roots.addAll(List.of(widgets));
	}
	//=============================================================================================

	//=============================================================================================
	public void unroot(Widget ... widgets) {
		this.roots.removeAll(List.of(widgets));
	}
	//=============================================================================================

	//=============================================================================================
	public Factory factory() {
		return factory;
	}
	//=============================================================================================

	//=============================================================================================
	public void destroy(Widget ... widgets) {
		for (Widget widget : widgets) {
			unroot(widget);
			destroy(widget.children().toArray(new Widget[] {}));
		}
	}
	//=============================================================================================
	
	//=============================================================================================
	public List<Widget> widgets() {
		return widgets_ro;
	}
	//=============================================================================================

	//=============================================================================================
	public List<Widget> unattached(List<Widget> dst) {
		for (Widget widget : widgets) {
			if (widget.parent() == null) {
				dst.add(widget);
			}
		}
		return dst;
	}
	//=============================================================================================
	
	//=============================================================================================
	public List<Widget> named(String name, List<Widget> dst) {
		for (Widget widget : widgets) {
			if (widget.name().equals(name)) {
				dst.add(widget);
			}
		}
		return dst;
	}
	//=============================================================================================

	//=============================================================================================
	public Builder newBuilder() {
		return new Builder(this);
	}
	//=============================================================================================

	//=============================================================================================
	public void render(Graphics graphics) {
		renderer.render(graphics);
	}
	//=============================================================================================

}
//*************************************************************************************************
