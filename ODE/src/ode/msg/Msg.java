//*************************************************************************************************
package ode.msg;
//*************************************************************************************************

import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.Queue;

import ode.util.ODEException;

//*************************************************************************************************
public class Msg {

	//=============================================================================================
	static enum ID {
		KEY_PRESSED,
		KEY_RELEASED,
		KEY_TYPED,
		POINTER_ENTERED,
		POINTER_EXITED,
		POINTER_MOVED,
		POINTER_PRESSED,
		POINTER_RELEASED,
		POINTER_CLICKED,
		POINTER_WHEEL
	}
	//=============================================================================================

	//=============================================================================================
	private static final Map<ID, Queue<Object>> cache = new HashMap<>(); 
	//=============================================================================================

	//=============================================================================================
	@SuppressWarnings("unchecked")
	private static <C> C alloc(ID id, Class<C> cls) {
		C data = null;
		Queue<Object> queue = cache.get(id);
		if (queue != null) {
			data = (C) queue.poll();  
		}
		if (data == null) {
			try {
				data = (C) cls.getDeclaredConstructor().newInstance();
			} catch (Exception e) {
				throw new ODEException(e);
			}
		}
		return data;
	}
	//=============================================================================================

	//=============================================================================================
	private static void free(ID id, Object data) {
		Queue<Object> queue = cache.get(id);
		if (queue == null) {
			queue = new LinkedList<>();
			cache.put(id, queue);
		}
		queue.offer(data);
	}
	//=============================================================================================
	
	//=============================================================================================
	private ID id;
	private Object data;
	//=============================================================================================

	//=============================================================================================
	void clear() {
		if (data != null) {
			free(id, data);
		}
		id = null;
		data = null;
	}
	//=============================================================================================
	
	//=============================================================================================
	public ID id() {
		return id;
	}
	//=============================================================================================

	//=============================================================================================
	public Object data() {
		return data;
	}
	//=============================================================================================

	//=============================================================================================
	@SuppressWarnings("unchecked")
	public <C> C data(Class<C> cls) {
		return (C) data;
	}
	//=============================================================================================
	
	//=============================================================================================
	<C> void init(ID id, Class<C> cls) {
		this.id = id;
		if (cls != null) {
			this.data = alloc(id, cls);
		}
	}
	//=============================================================================================
	
}
//*************************************************************************************************
