//*************************************************************************************************
package age.db.obj;
//*************************************************************************************************

import java.io.Reader;

//*************************************************************************************************
public class Parser {

	//=============================================================================================
	private Scanner scanner = new Scanner();
	//=============================================================================================
	
	//=============================================================================================
	public void init(Reader reader) {
		scanner.init(null);
	}
	//=============================================================================================
	
	//=============================================================================================
	public void parse() {
		parseVertex();
		parseTexture();
		parseNormal();
		parseParameter();
		parseFace();
		parseLine();
	}
	//=============================================================================================

	//=============================================================================================
	public void parseVertex() {
		match("v");
		parseFloat();
		parseFloat();
		parseFloat();
		if (isFloat()) {
			parseFloat();
		}
		parseNL();
	}
	//=============================================================================================

	//=============================================================================================
	public void parseTexture() {
		match("vt");
		parseFloat();
		if (isFloat()) {
			parseFloat();
		}
		if (isFloat()) {
			parseFloat();
		}
		parseNL();
	}
	//=============================================================================================

	//=============================================================================================
	public void parseNormal() {
		match("vt");
		parseFloat();
		parseFloat();
		parseFloat();
		parseNL();
	}
	//=============================================================================================

	//=============================================================================================
	public void parseParameter() {
		match("p");
		parseFloat();
		if (isFloat()) {
			parseFloat();
		}
		if (isFloat()) {
			parseFloat();
		}
		parseNL();
	}
	//=============================================================================================

	//=============================================================================================
	public void match(String token) {
		
	}
	//=============================================================================================
	
	//=============================================================================================
	public boolean isFloat() {
		return false;
	}
	//=============================================================================================
	
	//=============================================================================================
	public void parseFloat() {
		
	}
	//=============================================================================================

	//=============================================================================================
	public void parseNL() {
		
	}
	//=============================================================================================
	
	//=============================================================================================
	public void parseFace() {
		match("f");
		parseIndexBlock();
		parseIndexBlock();
		parseIndexBlock();
		if (isIndex()) {
			parseIndexBlock();
		}
		parseNL();
	}
	//=============================================================================================

	//=============================================================================================
	public void parseIndexBlock() {
		parseIndex();
		if (isIndexDelimiter()) {
			parseIndexDelimiter();
			if (isIndexDelimiter()) {
				parseIndexDelimiter();
				parseIndex();
			} else {
				parseIndex();
				if (isIndexDelimiter()) {
					parseIndexDelimiter();
					parseIndex();
				}
			}
		}
	}
	//=============================================================================================

	//=============================================================================================
	public boolean isIndexDelimiter() {
		return false;
	}
	//=============================================================================================
	
	//=============================================================================================
	public void parseIndexDelimiter() {
		
	}
	//=============================================================================================
	
	//=============================================================================================
	public void parseLine() {
		match("l");
		while (isIndex()) {
			parseIndex();
		}
		parseNL();
	}
	//=============================================================================================

	//=============================================================================================
	public boolean isIndex() {
		return false;
	}
	//=============================================================================================
	
	//=============================================================================================
	public void parseIndex() {
		
	}
	//=============================================================================================

}
//*************************************************************************************************
