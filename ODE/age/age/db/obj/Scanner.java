//*************************************************************************************************
package age.db.obj;
//*************************************************************************************************

import java.io.Reader;
import age.util.X;

//*************************************************************************************************
public class Scanner {

	//=============================================================================================
	private Reader reader = null;
	private char   look   = '\0';
	//=============================================================================================
	
	//=============================================================================================
	public void init(Reader reader) {
		this.reader = reader;
		next();
	}
	//=============================================================================================

	//=============================================================================================
	public void scan() {
		if (isWhitespace(look)) {
			skipWhitespace();
		} else if ((isNewline(look))) {
			skipNewline();
		} else if (match(look, '#')) {
			skipLineComment();
		}
	}
	//=============================================================================================
	
	//=============================================================================================
	public void next() {
		try {
			int res = reader.read();
			look = (res == -1) ? '\0' : (char) res;
		} catch (Exception e) {
			throw new X(e);
		}
	}
	//=============================================================================================

	//=============================================================================================
	private static final boolean isAlphaUc(char c) {
		return (c >= 'A') && (c <= 'Z');
	}
	//=============================================================================================	

	//=============================================================================================
	private static final boolean isAlphaLc(char c) {
		return (c >= 'a') && (c <= 'z');
	}
	//=============================================================================================	

	//=============================================================================================
	private static final boolean isAlphaSpecial(char c) {
		return c == '_';
	}
	//=============================================================================================	
	
	//=============================================================================================
	private static final boolean isAlpha(char c) {
		return isAlphaUc(c) || isAlphaLc(c);
	}
	//=============================================================================================	

	//=============================================================================================
	private static final boolean isAlphaExt(char c) {
		return isAlpha(c) || isAlphaSpecial(c);
	}
	//=============================================================================================	
	
	//=============================================================================================
	private static final boolean isWhitespace(char c) {
		return (c == ' ') || (c == '\t');
	}
	//=============================================================================================	

	//=============================================================================================
	private static final boolean isNewline(char c) {
		return (c == '\r') || (c == '\n');
	}
	//=============================================================================================	
	
	//=============================================================================================
	private static final boolean isBinary(char c) {
		return (c >= '0') && (c <= '1');
	}
	//=============================================================================================	

	//=============================================================================================
	private static final boolean isOctal(char c) {
		return (c >= '0') && (c <= '7');
	}
	//=============================================================================================	
	
	//=============================================================================================
	private static final boolean isDecimal(char c) {
		return (c >= '0') && (c <= '9');
	}
	//=============================================================================================	

	//=============================================================================================
	private static final boolean isHexLc(char c) {
		return
			isDecimal(c) ||
			((c >= 'a') && (c <= 'f'));
	}
	//=============================================================================================	

	//=============================================================================================
	private static final boolean isHexUc(char c) {
		return
			isDecimal(c) ||
			((c >= 'A') && (c <= 'F'));
	}
	//=============================================================================================	

	//=============================================================================================
	private static final boolean isHex(char c) {
		return
			isDecimal(c) ||
			((c >= 'a') && (c <= 'f')) ||
			((c >= 'A') && (c <= 'F'));
	}
	//=============================================================================================	

	//=============================================================================================
	private static final boolean match(char c , char cmp) {
		return (c == cmp);
	}
	//=============================================================================================	
	
}
//*************************************************************************************************
