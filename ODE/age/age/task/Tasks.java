//*************************************************************************************************
package age.task;
//*************************************************************************************************

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import age.Client;
import age.input.Event;
import age.input.Events;
import age.input.InputType;
import age.port.Port;

//*************************************************************************************************
public class Tasks {

	//=============================================================================================
	private final List<String> inbox  = new ArrayList<>();
	private final List<String> outbox = new ArrayList<>();
	private final Map<String, Task> tasks = new HashMap<>();
	//=============================================================================================

	//=============================================================================================
	private Port port;
	private Client client;
	//=============================================================================================

	//=============================================================================================
	public void assign(Port port) {
		this.port = port;
	}
	//=============================================================================================
	
	//=============================================================================================
	public void assign(Client client) {
		this.client = client;
	}
	//=============================================================================================

	//=============================================================================================
	public void assign(Events events) {
		events.assign(InputType.TASK_COMMAND, this::handleEvent);
	}
	//=============================================================================================

	//=============================================================================================
	private void handleEvent(Event e) {
		put(e.command());
	}
	//=============================================================================================
	
	//=============================================================================================
	public Tasks() {
		construct();
	}
	//=============================================================================================
	
	//=============================================================================================
	private void construct() {
		assign("fullscreen", this::toggleFullscreen);
		assign("shutdown", this::shutdown);
	}
	//=============================================================================================
	
	//=============================================================================================
	public void put(String command) {
		synchronized (inbox) {			
			inbox.add(command);
		}
	}
	//=============================================================================================

	//=============================================================================================
	public void assign(String command, Task task) {
		tasks.put(command, task);
	}
	//=============================================================================================
	
	//=============================================================================================
	public void update() {
		synchronized (inbox) {
			outbox.addAll(inbox);
			inbox.clear();
		}
		for (String command : outbox) {
			perform(command);
		}
		outbox.clear();
	}
	//=============================================================================================

	//=============================================================================================
	private void perform(String command) {
		Task task = tasks.get(command);
		if (task != null) {
			task.perform();
		}
	}
	//=============================================================================================

	//=============================================================================================
	private void toggleFullscreen() {
		boolean toggle = !port.fullscreen();
		port.fullscreen(toggle);
	}
	//=============================================================================================
	
	//=============================================================================================
	private void shutdown() {
		client.shutdown();
	}
	//=============================================================================================
	
}
//*************************************************************************************************
