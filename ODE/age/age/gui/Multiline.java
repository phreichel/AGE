//*************************************************************************************************
package age.gui;
//*************************************************************************************************

import age.task.Tasks;

//*************************************************************************************************
//TODO:add javadoc comments
public class Multiline extends Widget {

	//=============================================================================================
	private int offset;
	private int[] buffer = new int[1024];
	//=============================================================================================

	//=============================================================================================
	private VScroller scroller;
	//=============================================================================================

	//=============================================================================================
	public Multiline() {
		create();
	}
	//=============================================================================================

	//=============================================================================================
	private void create() {
		
		flag(Flag.MULTILINE);
		dimension(600, 800);
		
		scroller = new VScroller();
		scroller.position(600-15, 5);
		scroller.dimension(10, 770);
		
		add(scroller);
		
	}
	//=============================================================================================

	//=============================================================================================
	public void assign(Tasks tasks) {
		scroller.assign(tasks, this::up, this::down);
	}
	//=============================================================================================
	
	//=============================================================================================
	public void text(String text) {
		text = text.replace("\r", "");
		text = text.replace("\t", "  ");
		super.text(text);
	}
	//=============================================================================================
	
	//=============================================================================================
	public int offset() {
		return offset;
	}
	//=============================================================================================

	//=============================================================================================
	public void up() {
		offset(offset()-1);
	}
	//=============================================================================================

	//=============================================================================================
	public void down() {
		offset(offset()+1);
	}
	//=============================================================================================
	
	//=============================================================================================
	public void offset(int offset) {
		offset = Math.max(0, offset);
		offset = Math.min(offset, count()-1);
		this.offset = offset;
		scroller.value(offset());
	}
	//=============================================================================================
	
	//=============================================================================================
	public int count() {
		return buffer[0];
	}
	//=============================================================================================
	
	//=============================================================================================
	public int page() {
		return buffer[1];
	}
	//=============================================================================================

	//=============================================================================================
	public int lineHeight() {
		return buffer[2];
	}
	//=============================================================================================

	//=============================================================================================
	public CharSequence line(int idx) {
		int start = buffer[3+2*idx];
		int end = buffer[3+2*idx+1];
		return text().subSequence(start, end);
	}
	//=============================================================================================
	
	//=============================================================================================
	public int[] buffer() {
		return buffer;
	}
	//=============================================================================================

	//=============================================================================================
	public void rescale(float dy) {
		float total = scroller.dimension().y;
		float part = scroller.handle().dimension().y;
		float mTotal = total - part;
		float mScale = dy / mTotal;
		float c = count()-1;
		int d = (int) Math.rint(mScale * c);
		offset(offset() + d);
	}
	//=============================================================================================
	
	//=============================================================================================
	public void update() {
		if (offset() != 0 || count() > page()) {
			scroller.clear(Flag.HIDDEN);
		} else {
			scroller.flag(Flag.HIDDEN);
		}
		scroller.set(count(), page(), offset());
	}
	//=============================================================================================
	
}
//*************************************************************************************************
